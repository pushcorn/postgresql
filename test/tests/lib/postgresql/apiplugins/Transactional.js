test.plugin ("postgresql.apiplugins.Transactional", "dispatch")
    .useMockPgClient ()
        .init (s => s.called = [])
        .init (s => s.addPlugin = "class")
        .init (s => s.pluginMethod = "apiplugin")
        .init (s => s.hostClassName = "")
        .init (s => s.MyPlugin = s.postgresql.defineApiPlugin ("MyPlugin")
            .onPreDispatch (() => s.called.push ("preDispatchMyPlugin"))
            .onPostDispatch (() => s.called.push ("postDispatchMyPlugin"))
        )
        .init (s => s.hostClass = nit.defineClass ("MyApi", "postgresql.Api"))
        .up (s => s.args = s.ctx = s.http.Context.new (null, { serviceproviders: s.db }))
        .up (s => s.hostClass.apiplugin ("postgresql:my-plugin"))
        .snapshot ()

    .should ("wrap the dispatch method with a transaction")
        .up (s => s.hostClass.onDispatch (() => s.called.push ("dispatchApi")))
        .expectingPropertyToBe ("db.client.statements", ["BEGIN", "COMMIT"])
        .expectingPropertyToBe ("called", ["preDispatchMyPlugin", "dispatchApi", "postDispatchMyPlugin"])
        .commit ()

    .should ("rollback the transaction if an error occurred")
        .up (s => s.hostClass.onDispatch (() => nit.throw ("DISPATCH_ERR")))
        .throws ("DISPATCH_ERR")
        .expectingPropertyToBe ("db.client.statements", ["BEGIN", "ROLLBACK"])
        .expectingPropertyToBe ("called", ["preDispatchMyPlugin"])
        .commit ()
;
