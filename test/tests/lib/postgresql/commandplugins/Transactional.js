test.plugin ("postgresql.commandplugins.Transactional", "run")
    .useMockPgClient ()
        .init (s => s.called = [])
        .init (s => s.addPlugin = "class")
        .init (s => s.pluginMethod = "commandplugin")
        .init (s => s.hostClassName = "")
        .init (s => s.MyPlugin = s.postgresql.defineCommandPlugin ("MyPlugin")
            .onPreRun (() => s.called.push ("preRunMyPlugin"))
            .onPostRun (() => s.called.push ("postRunMyPlugin"))
        )
        .init (s => s.hostClass = nit.defineClass ("MyCommand", "postgresql.Command"))
        .up (s => s.args = s.hostClass.Context.new ({ serviceproviders: s.db }))
        .up (s => s.hostClass.commandplugin ("postgresql:my-plugin"))
        .snapshot ()

    .should ("wrap the run method with a transaction")
        .up (s => s.hostClass.onRun (() => s.called.push ("runCommand")))
        .expectingPropertyToBe ("db.client.statements", ["BEGIN", "COMMIT"])
        .expectingPropertyToBe ("called", ["preRunMyPlugin", "runCommand", "postRunMyPlugin"])
        .commit ()

    .should ("rollback the transaction if an error occurred")
        .up (s => s.hostClass.onRun (() => nit.throw ("RUN_ERR")))
        .throws ("RUN_ERR")
        .expectingPropertyToBe ("db.client.statements", ["BEGIN", "ROLLBACK"])
        .expectingPropertyToBe ("called", ["preRunMyPlugin"])
        .commit ()
;
